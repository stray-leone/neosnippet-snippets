snippet     class
abbr        class Class(...): ...
options     head
	class ${1:#:name}(${2:object}):
		def __init__(self, ${3}):
			${0}

snippet     classd
abbr        class Class(...): "..."
options     head
	class ${1:#:name}(${2:object}):
		"""${3:#:class documentation}"""
		def __init__(self, ${4}):
			"""${5:#:__init__ documentation}"""
			${0}

snippet     def
abbr        def function(...): ...
options     head
	def ${1:#:name}(${2}):
		${0:TARGET}

snippet     defd
abbr        def function(...): """..."""
options     head
	def ${1:#:name}(${2}):
		"""${3:#:function documentation}"""
		${0:TARGET}

snippet     defm
abbr        def method(self, ...): ...
options     head
	def ${1:#:name}(self, ${2}):
		${0:TARGET}

snippet     defmd
abbr        def method(self, ...): "..."
options     head
	def ${1:#:name}(self, ${2}):
		"""${3:#:method documentation}"""
		${0:TARGET}

snippet     mydef
abbr        def function(...): ...
options     head
	def ${1:#:name}(${2}):
        import my_utils
        print "function called "+my_utils.get_func_name()+"()"
		${0:TARGET}

snippet     elif
abbr        elif ...: ...
options     head
	elif ${1:#:condition}:
		${0}

snippet     else
abbr        else: ...
options     head
	else:
		${0}

snippet     fileidiom
abbr        with open()
options     head
	with open(${1:#:filename}, '${2:#:mode}') as ${3:f}:
		${0:TARGET}

snippet     for
abbr        for ... in ...: ...
options     head
	for ${1:#:value} in ${2:#:list}:
		${0:TARGET}

snippet     if
abbr        if ...: ...
options     head
	if ${1:#:condition}:
		${0:TARGET}

snippet     ifmain
abbr        if __name__ == '__main__': ...
alias       main
options     head
	if __name__ == '__main__':
		${0:TARGET}

snippet     tryexcept
abbr        try: ... except ...: ...
options     head
	try:
		${1:TARGET}
	except ${2:#:ExceptionClass}:
		${3}

snippet     tryfinally
abbr        try: ... finally: ...
options     head
	try:
		${1:TARGET}
	finally:
		${2}

snippet     while
abbr        while ...: ...
options     head
	while ${1:#:condition}:
		${0:TARGET}

snippet     with
abbr        with {func}({file}) as :
options     head
	with ${1:open}(${2:#:filename, mode}) as ${3:f}:
		${0:TARGET}

snippet     filter
abbr        [x for x in {list} if {condition}]
	[$1 for ${1:x} in ${2:#:list} if ${3:#:condition}]

snippet     print
options     word
  print(${0:TARGET})

snippet     coding
abbr        # -*- coding ...
    # -*- coding: utf-8 -*-

snippet     getattr
abbr        getattr(..., ...)
options     word
    getattr(${1:#:obj}, ${2:#:attr})

snippet     setattr
abbr        setattr(..., ...)
    setattr(${1:#:obj}, ${2:#:attr}, ${3:#:value})

snippet     hasattr
abbr        hasattr(..., ...)
options     word
    hasattr(${1:#:obj}, ${2:#:attr})

snippet     pdb
abbr        import pdb..
    import pdb; pdb.set_trace()

snippet     init
abbr        initialize
options     head
    #-*- coding: utf-8 -*-
    import os
    import sys
    import logging
    logging.basicConfig(filename= __name__+".log", format='%(asctime)s : %(threadName)s : %(levelname)s : %(message)s', level=logging.INFO)

    def main(argv):

    if __name__ == '__main__':
        main(sys.argv)

snippet     mkdir
abbr        make dirs
options     head
    if not os.path.isdir(${1:output_dir}): os.mkdir($1) ${2:# import os}


snippet     time
abbr        datetime.
options     head
    ${1:time_stamp} = datetime.datetime.utcnow() ${2:#import datetime}

snippet     encode
abbr        encode("utf-8")
options     word
    encode(${1:"utf-8"})


snippet     decode
abbr        decode("utf-8")
options     word
    decode(${1:"utf-8"})

snippet     pprint
abbr        pprint
options     head
    from pprint import PrettyPrinter as _pp
    pp = _pp(indent = 4)
    pp.pprint(${1:print_target})

snippet     walk
abbr        os.walk()
options     head
    for root_dir, dirs, files in os.walk(${1:path}):
        for ${2:file} in files:

snippet     process
abbr        multi processing
options     head
    # for multi process
    from multiprocessing import Process, current_process
    import multiprocessing
    import Queue


    def main(argv):

        def target_function(queue):

            while True:
                try:
                    #TODO: do something.
                
                except Queue.Empty as empty_e:
                    sys.stderr.write(current_process_name+" "+"Queue is empty"+"\n")
                    with open("ru_word_retrieve.log","a") as log_file: log_file.write(current_process_name+" Queue is empty"+"\n")
                    #continue
                    break

        queue = multiprocessing.Queue()
        processes = []
        process_size = 6
        
        #TODO: SET input file path
        input_dir = "../input/"
        input_fname = "FRA.vocab"
        input_fpath = input_dir+input_fname
        
        queue_list= open(input_fpath).readlines()
        
        # queuing
        #for input_sentence in target_docu_list: #khh-to-be-modified
        for i, item in enumerate(queue_list):
            item = item.strip()
            sys.stderr.write(str(i)+" _ queuing : "+item+"\n")
            queue.put((i+1,item))

        # append process
        for i in range(process_size):
            p=Process(target=target_function, args=(queue,))
            p.start()
            processes.append(p)

        # join process
        for p in processes:
            p.join()

snippet     ipdb
abbr        import ipdb..
    import ipdb; ipdb.set_trace()
